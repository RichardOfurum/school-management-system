generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Admin {
  id        String   @id
  username  String   @unique
  firstName String
  surname   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // Add a default value
}

model Student {
  id        String  @id
  username  String  @unique
  name      String
  surname   String
  email     String? @unique
  phone     String? @unique
  address   String
  img       String?
  bloodType String
  sex       String

  parentId    String? // Allow NULL values explicitly
  parent      Parent?      @relation(fields: [parentId], references: [id], onDelete: SetNull)
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // Add a default value
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       String
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // Add a default value
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt // Add a default value
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students  Student[]
  classess  Class[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt // Add a default value
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt // Add a default value
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  teachers  Teacher[]
  lessons   Lesson[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt // Add a default value
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       String
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt // Add a default value
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // Add a default value
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // Add a default value
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt // Add a default value
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // Add a default value
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId   Int?
  class     Class?   @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // Add a default value
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId   Int?
  class     Class?   @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // Add a default value
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt // Add a default value
}

model Prospectus {
  id    Int     @id @default(autoincrement())
  title String
  file  String?
}
